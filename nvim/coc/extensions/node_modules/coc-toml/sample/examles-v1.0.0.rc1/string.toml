###############################################################################
# String

# There are four ways to express strings: basic, multi-line basic, literal,
# and multi-line literal. All strings must contain only valid UTF-8 characters.
#
# Basic strings are surrounded by quotation marks. Any Unicode character may be
# used except those that must be escaped: quotation mark, backslash, and the
# control characters other than tab (U+0000 to U+0008, U+000A to U+001F,
# U+007F).
str = "I'm a string. \"You can quote me\". Name\tJos\u00E9\nLocation\tSF."
# For convenience, some popular characters have a compact escape sequence.
# \b         - backspace       (U+0008)
# \t         - tab             (U+0009)
# \n         - linefeed        (U+000A)
# \f         - form feed       (U+000C)
# \r         - carriage return (U+000D)
# \"         - quote           (U+0022)
# \\         - backslash       (U+005C)
# \uXXXX     - unicode         (U+XXXX)
# \UXXXXXXXX - unicode         (U+XXXXXXXX)

# Any Unicode character may be escaped with the \uXXXX or \UXXXXXXXX forms.
# The escape codes must be valid Unicode scalar values.
# All other escape sequences not listed above are reserved and, if used, TOML
# should produce an error.
# Sometimes you need to express passages of text (e.g. translation files) or
# would like to break up a very long string into multiple lines. TOML makes
# this easy.
# Multi-line basic strings are surrounded by three quotation marks on each side
# and allow newlines. A newline immediately following the opening delimiter
# will be trimmed. All other whitespace and newline characters remain intact.
str1 = """
Roses are red
Violets are blue"""
# TOML parsers should feel free to normalize newline to whatever makes sense for
# their platform.
# On a Unix system, the above multi-line string will most likely be the same as:
str2 = "Roses are red\nViolets are blue"

# On a Windows system, it will most likely be equivalent to:
str3 = "Roses are red\r\nViolets are blue"

# Any Unicode character may be used except those that must be escaped:
# backslash and the control characters other than tab, line feed, and carriage
# return (U+0000 to U+0008, U+000B, U+000C, U+000E to U+001F, U+007F).

# You can write a quotation mark, or two adjacent quotation marks, anywhere
# inside a multi-line basic string. They can also be written just inside the
# delimiters.
str4 = """Here are two quotation marks: "". Simple enough."""
# str5 = """Here are three quotation marks: """."""  # INVALID
str5 = """Here are three quotation marks: ""\"."""
str6 = """Here are fifteen quotation marks: ""\"""\"""\"""\"""\"."""
# "This," she said, "is just a pointless statement."
str7 = """"This," she said, "is just a pointless statement.""""

# If you're a frequent specifier of Windows paths or regular expressions, then
# having to escape backslashes quickly becomes tedious and error prone. To
# help, TOML supports literal strings which do not allow escaping at all.

# Literal strings are surrounded by single quotes. Like basic strings, they
# must appear on a single line:

# What you see is what you get.
quoted   = 'Tom "Dubs" Preston-Werner'
regex    = '<\i\c*\s*>'
winpath  = 'C:\Users\nodejs\templates'
winpath2 = '\\ServerX\admin$\system32\'

# Since there is no escaping, there is no way to write a single quote inside a
# literal string enclosed by single quotes. Luckily, TOML supports a multi-line
# version of literal strings that solves this problem.

# Multi-line literal strings are surrounded by three single quotes on each side
# and allow newlines. Like literal strings, there is no escaping whatsoever. A
# newline immediately following the opening delimiter will be trimmed. All
# other content between the delimiters is interpreted as-is without
# modification.
lines  = '''
The first newline is
trimmed in raw strings.
   All other whitespace
   is preserved.
'''
regex2 = '''I [dw]on't need \d{2} apples'''

# You can write 1 or 2 single quotes anywhere within a multi-line literal
# string, but sequences of three or more single quotes are not permitted.
quot15 = '''Here are fifteen quotation marks: """""""""""""""'''

# apos15 = '''Here are fifteen apostrophes: ''''''''''''''''''  # INVALID
apos15 = "Here are fifteen apostrophes: '''''''''''''''"

# 'That's still pointless', she said.
# *duplicated* str = ''''That's still pointless', she said.'''

# Control characters other than tab are not permitted in a literal string.
# Thus, for binary data it is recommended that you use Base64 or another
# suitable ASCII or UTF-8 encoding. The handling of that encoding will be
# application specific.

[owner]
dob  = 1979-05-27T07:32:00-08:00 # First class dates
name = "Tom Preston-Werner"      
[database]
connection_max = 5000
enabled        = true
ports          = [8001, 8001, 8002]
server         = "192.168.1.1"
[servers]
# Indentation (tabs and/or spaces) is allowed but not required
  [servers.alpha]
  dc = "eqdc10"
  ip = "10.0.0.1"
  [servers.beta]
  dc = "eqdc10"
  ip = "10.0.0.2"
[clients]
data = [["gamma", "delta"], [1, 2]]
# Line breaks are OK when inside arrays
hosts = ["alpha", "omega"]

###############################################################################
