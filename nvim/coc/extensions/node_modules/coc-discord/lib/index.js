"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const coc_nvim_1 = require("coc.nvim");
const discord_rpc_1 = require("discord-rpc");
const O = __importStar(require("fp-ts/lib/Option"));
const pipeable_1 = require("fp-ts/lib/pipeable");
const logger_1 = require("./utils/logger");
const clientId = '694558978776105000';
const logger = new logger_1.Logger('discord');
const ELAPSE_UPDATE_DURATION = 10000;
const setActivity = (client, startTimestamp) => {
    const details = pipeable_1.pipe(O.fromNullable(coc_nvim_1.workspace.uri), O.filter((x) => x.startsWith('file:///')), O.map((x) => x.substr(8)), O.map((x) => x.split('/')), O.filter((xs) => xs.length > 0), O.map((xs) => xs.reverse()[0]), O.map((x) => `Editing ${x}`), O.toUndefined);
    const state = pipeable_1.pipe(O.fromNullable(coc_nvim_1.workspace.root), O.map((x) => x.split('/')), O.filter((xs) => xs.length > 0), O.map((xs) => xs.reverse()[0]), O.map((x) => `On ${x}`), O.toUndefined);
    client.setActivity({ state, details, startTimestamp, instance: false });
};
const activate = () => {
    logger.info('Starting coc-discord...');
    const discordRpcClient = new discord_rpc_1.Client({ transport: 'ipc' });
    discordRpcClient.connect(clientId);
    discordRpcClient.login({ clientId }).catch((e) => logger.error(e));
    const startTimestamp = Date.now();
    discordRpcClient.on('ready', () => {
        setActivity(discordRpcClient, startTimestamp);
        setInterval(() => setActivity(discordRpcClient, startTimestamp), ELAPSE_UPDATE_DURATION);
        logger.info(`Started coc-discord client. Updating activity every ${ELAPSE_UPDATE_DURATION / 1000}s.`);
    });
};
exports.activate = activate;
//# sourceMappingURL=index.js.map