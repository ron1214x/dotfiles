"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const unibeautify_1 = require("unibeautify");
const src_1 = require("../../src");
testWithWrapLineLength(12);
testWithWrapLineLength(20);
testWithWrapLineLength(80);
testWithWrapLineLength(120);
function testWithWrapLineLength(wrapLineLength) {
    test(`should successfully beautify JavaScript text with wrap_line_length=${wrapLineLength}`, () => {
        const unibeautify = unibeautify_1.newUnibeautify();
        unibeautify.loadBeautifier(src_1.default);
        const shortString = "c";
        const veryLongString = "c".repeat(Math.ceil(wrapLineLength / 2));
        const shortText = `["${shortString}", "${shortString}"];`;
        const shortBeautifierResult = shortText;
        if (shortText.length > wrapLineLength) {
            throw new Error(`Test text will always wrap. Please use a printWidth value greater than ${shortText.length}.`);
        }
        const longText = `["${veryLongString}", "${veryLongString}"];`;
        const longBeautifierResult = `["${veryLongString}",\n  "${veryLongString}"\n];`;
        const indentSize = 2;
        return Promise.all([
            beautifyWithPrintWidth(unibeautify, shortText, wrapLineLength).then(results => {
                expect(results).toBe(shortBeautifierResult);
            }),
            beautifyWithPrintWidth(unibeautify, longText, wrapLineLength).then(results => {
                expect(results).toBe(longBeautifierResult);
            })
        ]);
    });
}
function beautifyWithPrintWidth(unibeautify, text, printWidth) {
    const indentSize = 2;
    return unibeautify.beautify({
        languageName: "JavaScript",
        options: {
            JavaScript: {
                indent_char: " ",
                indent_size: indentSize,
                end_with_comma: false,
                wrap_line_length: printWidth
            }
        },
        text
    });
}
//# sourceMappingURL=wrapLineLength.spec.js.map